001: Hamming code
verifying the information by adding verify code (0/1) at desinated position

(1) count how much hamming code needed: 
2**r-1 >= m+r  (m=information length), (r= how many hamming code needed)
example : if you want to send a 16th information, then the hamming code was 
added at the position of  2**0, 2**1, 2**2....etc,(2**4=16, 2**5=32) 

(2)locate hamming code
example: 0	1	1	0	1	1	1	0 (original).
hamming added: 0 1	1	0	H8	1	1	1	H4	0	H2	H1

(3)transport the hamming code into binary
1: 001   2: 010  4:100  
change 0 into * 
1:**1  2:*1*  4:1**
show all possibilities of **1(*can be 0 or 1)
**1: 001;011;101;111(1,3,5,7)   delete location 1(hamming code itself)   ----(3,5,7)
*1*: 010;011;110;111(2,3,6,7)    delete location 2(hamming code itself） ----(3,6,7)
1**: 100;101;110;111(4,5,6,7)     deletelocation 4 (hamming code itself) ----(5,6,7)

which means:  
H1 can verify location,3,5,7
H2 can verify 3,6,7
H4 can verify 5,6,7

(4) calculate the hamming code
info: 1100(need 3 hamming code)
1 1 0 H4  0  H2 H1
at location 3,5,7 , count_1 = even, so H1=1
at location 3,6,7 , count_1 = odd， so H2=0
at location 5,6,7 , count_1 = odd,  so H3=0
now we got the completed hamming code:
1	1	0	0	0	0	1

(5) try finding out the error by using hamming code
origin_text = 1100001
received_text = 1100000 (error)
method:
H1=0, doesnt' match:
so we find that at location 1,3,5,7 there might be an error
H2=0, match 2,3,6,7 no error
H4=0, match 4,5,6,7 no error
so the error at location 1

warning: 
problems might occur when the whole text is wrong, but still can pass hamming verification
if that happens we can do nothing
