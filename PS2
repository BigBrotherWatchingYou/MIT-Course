# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    #  secret_word = A
    #  letters_guessed = B
    # check whether B contains a
    for char in secret_word:
      if char in letters_guessed:
        return True
      else:
        return False



def get_guessed_word(secret_word, letters_guessed):
    
    guessed =[]
    for i in range(len(secret_word)):
      if secret_word[i] in letters_guessed:
        guessed.append(secret_word[i])
      else:
        guessed.append('_ ')
    return guessed





def get_available_letters(letters_guessed):
    alphabet = string.ascii_lowercase
    a = []
    for char in alphabet:
      if char not in letters_guessed:
        a.append(char)
    return ''.join(a)
  
    
    

def hangman(secret_word):
    
    letters_guessed = []
    i = 7
    print(secret_word)
    print("Word length: ", len(secret_word))
    while i > 0:
      print("You have ", i, " chances")
      new_guess = input(str("Guess a word:\n"))
      
      if new_guess == '*':
        
        show_possible_matches(get_guessed_word(secret_word, letters_guessed))
        #print(show_possible_matches(get_guessed_word(secret_word, letters_guessed)))
      #here need to check if new_guess is inside letters_guessed
      
      #here check if the letter in secret_word
      if is_word_guessed(new_guess, secret_word):
        #guessed append the word in a right position
        letters_guessed.append(new_guess)
        print(get_available_letters(letters_guessed))
        print("Good Guess", get_guessed_word(secret_word, letters_guessed))
        
      else:
        letters_guessed.append(new_guess)
        print(get_available_letters(letters_guessed))
        print("!!!!WRONG!!!!\n", get_guessed_word(secret_word, letters_guessed)) 
        
      if get_guessed_word(secret_word, letters_guessed) == secret_word or new_guess == str(secret_word):
          print("You win")
          break
      print("The word you have used: ", letters_guessed) 
      print("--------------------------------------")
      
      i -= 1
      
      
      if i <= 0:
        print("you lose, secrect word:" , secret_word)
        break
    



# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    num = 0
    my_word = str(my_word).replace(' ', '')
    
    #delete space
    if len(my_word) != len(other_word):
      return False
    if len(my_word) == len(other_word):
      for i in range(len(my_word)):
    
        if my_word[i] == '_' or my_word[i] == other_word[i]:
          # skip the '_' 
          pass 
        else:
          #no match
          num += 1
    if num == 0:
      return True
    else:
      return False
    



def show_possible_matches(my_word):
    list = []
    for word in wordlist:
      if match_with_gaps(my_word, word):
        list.append(word)
    
    if len(list) != 0:
      print(''.join(list))
    else:
      print("No matches found")

    



def hangman_with_hints(secret_word):
    
    pass


#if __name__ == "__main__":
    

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
#secret_word = choose_word(wordlist)
secret_word = choose_word(wordlist)

hangman(secret_word)
    #pass

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    #secret_word = choose_word(wordlist)
    #hangman_with_hints(secret_word)
