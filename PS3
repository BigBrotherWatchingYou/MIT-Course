# 6.0001 Problem Set 3
#
# The 6.0001 Word Game
# Created by: Kevin Luu <luuk> and Jenna Wiens <jwiens>
#
# Name          : <your name>
# Collaborators : <your collaborators>
# Time spent    : <total time>


import math
import random
import string

import pdb

VOWELS = 'aeiou'
CONSONANTS = 'bcdfghjklmnpqrstvwxyz'
HAND_SIZE = 7

SCRABBLE_LETTER_VALUES = {
    'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 'h': 4, 'i': 1, 'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 10, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10
}

# -----------------------------------
# Helper code
# (you don't need to understand this helper code)

WORDLIST_FILENAME = "words.txt"

def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # wordlist: list of strings
    wordlist = []
    for line in inFile:
        wordlist.append(line.strip().lower())
    print("  ", len(wordlist), "words loaded.")
    return wordlist

def get_frequency_dict(sequence):
    """
    Returns a dictionary where the keys are elements of the sequence    
    and the values are integer counts, for the number of times that 
    an element is repeated in the sequence. 

    sequence: string or list    
    return: dictionary  
    """ 

    # freqs: dictionary (element_type -> int)   
    freq = {}   
    for x in sequence:  
        freq[x] = freq.get(x,0) + 1 
    return freq 
	#turn the 'sequence' into dictionery

# (end of helper code)
# -----------------------------------

#
# Problem #1: Scoring a word
#
def get_word_score(word, n):
    """
    Returns the score for a word. Assumes the word is a
    valid word.

    You may assume that the input word is always either a string of letters, 
    or the empty string "". You may not assume that the string will only contain 
    lowercase letters, so you will have to handle uppercase and mixed case strings 
    appropriately. 

	The score for a word is the product of two components:

	The first component is the sum of the points for letters in the word.
	The second component is the larger of:
            1, or
            7*wordlen - 3*(n-wordlen), where wordlen is the length of the word
            and n is the hand length when the word was played

	Letters are scored as in Scrabble; A is worth 1, B is
	worth 3, C is worth 3, D is worth 2, E is worth 1, and so on.

    word: string
    n: int >= 0
    returns: int >= 0
    """
    # 1. sum up the points of the letters
    # 2.n is the len of the hand
    # 2.score = 7*wordlen - 3*(n-wordlen)
    # 2.which means the longer the wordlen, the higher the score
    # this function is to count the current score
    # it has two components , whichever has a greater value becomes the score  
    #remember to transfer word into str'asfwe'
    value_score = 0
    sum_score = 0
    #count value score
    word = word.lower()
    for i in word:
        if i in SCRABBLE_LETTER_VALUES:
            
            value_score += SCRABBLE_LETTER_VALUES[i]
    #count sum score
    sum_score = (7*len(word)) - (3*(n - len(word)))
    if sum_score <= 0:
        sum_score = 1
    #if word = ''
    if len(word) <= 0:
        value_score = 0
        sum_score = 0 
    #make components, check which score is greater
    return sum_score * value_score

    
   

    

#
# Make sure you understand how this function works and what it does!
#   count the score after intuping a word
def display_hand(hand):
    """
    Displays the letters currently in the hand.

    For example:
       display_hand({'a':1, 'x':2, 'l':3, 'e':1})
    Should print out something like:
       a x x l l l e
    The order of the letters is unimportant.

    hand: dictionary (string -> int)
    """
    #show the dictionery in a much humanity way
    for letter in hand.keys():
        for j in range(hand[letter]):    # print the letter different times based on its range
             print(letter, end=' ')      # end = ' ':print all on the same line
                          
    print()                              # print an empty line

#
# Make sure you understand how this function works and what it does!
# You will need to modify this for Problem #4.
#
def deal_hand(n):
    """
    Returns a random hand containing n lowercase letters.
    ceil(n/3) letters in the hand should be VOWELS (note,
    ceil(n/3) means the smallest integer not less than n/3).

    Hands are represented as dictionaries. The keys are
    letters and the values are the number of times the
    particular letter is repeated in that hand.

    n: int >= 0
    returns: dictionary (string -> int)
    """
    
    hand={}
    num_vowels = int(math.ceil(n / 3))

    for i in range(num_vowels):
        x = random.choice(VOWELS)
        hand[x] = hand.get(x, 0) + 1
    
    for i in range(num_vowels, n):    
        x = random.choice(CONSONANTS)
        hand[x] = hand.get(x, 0) + 1
    
    return hand

#
# Problem #2: Update a hand by removing letters
#
def update_hand(hand, word):
    """
    Does NOT assume that hand contains every letter in word at least as
    many times as the letter appears in word. Letters in word that don't
    appear in hand should be ignored. Letters that appear in word more times
    than in hand should never result in a negative count; instead, set the
    count in the returned hand to 0 (or remove the letter from the
    dictionary, depending on how your code is structured). 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -> int)    
    returns: dictionary (string -> int)
    """
    word = word.lower()
    hand_copy = hand.copy()
  
    for k in word:
        hand_copy[k] -= 1
        
    return hand_copy
    #delete the word in hand, return new_hand
    

#
# Problem #3: Test word validity
#
def is_valid_word(word, hand, word_list):
    """
    Returns True if word is in the word_list and is entirely
    composed of letters in the hand. Otherwise, returns False.
    Does not mutate hand or word_list.
   
    word: string
    hand: dictionary (string -> int)
    word_list: list of lowercase strings
    returns: boolean
    """
    
    word = word.lower()
    point = False
    

    
    # set a copy of hand
    copy_hand = hand.copy()
    # create two for loop
    # loop_1: when there's a '*' in word 
    if word.count('*') >= 1:
        # replace  '*' with another letter
        
        for letters in string.ascii_lowercase:
            try_word = word[:]
            try_word = try_word.replace('*', letters)
            
            if try_word in word_list:
                point = True
                

            
    # loop when there's no '*' in word    
    if '*' not in word:
        if word in word_list:
            point = True
            for letters in word:
                if letters in copy_hand:
                    # delete every letter when matched
                    copy_hand[letters] -= 1
            
                    if copy_hand[letters] < 0:
                    #situation when word has a letter more times than in hand
                        point = False
                if letters not in copy_hand:
                    point = False
        else:
            point = False
      
    # when a letter in word got no matching in hand, return False
    if point:
        return True
    # all matched : return True
    else:
        return False
    # TO DO... Remove this line when you implement this function

#
# Problem #5: Playing a hand
#
def calculate_handlen(hand):
    """ 
    Returns the length (number of letters) in the current hand.
    
    hand: dictionary (string-> int)
    returns: integer
    """
    hand_len = 0
    for letter in hand.keys():
        for j in range(hand[letter]):
            hand_len += 1
      # TO DO... Remove this line when you implement this function
    return hand_len
def play_hand(hand, word_list):

    """
    Allows the user to play the given hand, as follows:

    * The hand is displayed.
    
    * The user may input a word.

    * When any word is entered (valid or invalid), it uses up letters
      from the hand.

    * An invalid word is rejected, and a message is displayed asking
      the user to choose another word.

    * After every valid word: the score for that word is displayed,
      the remaining letters in the hand are displayed, and the user
      is asked to input another word.

    * The sum of the word scores is displayed when the hand finishes.

    * The hand finishes when there are no more unused letters.
      The user can also finish playing the hand by inputing two 
      exclamation points (the string '!!') instead of a word.

      hand: dictionary (string -> int)
      word_list: list of lowercase strings
      returns: the total score for the hand
      
    """
    # Keep track of the total score
    total_score = 0
    hand['*']= 1
    print("我给你送了张牌，' * ' 这可以替代任何一个字母")
    print("用法举例：若你要输入'zoo' 可以输入'zo*'来替代")
    # As long as there are still letters left in the hand:
    while calculate_handlen(hand) > 0 :
        
        if calculate_handlen(hand) <= 1:
            print("you got only one letter left, time to give up!\n就剩一个了，别玩了，哥们，输入 !! 退出吧！\n")
        print("input !! to quit \n如果你感觉脑子不够用，可以输入 !!  结束游戏 ")
        print("input 'wdnmd' to enter helper mode\n或者输入 wdnmd 进入帮助模式")
        if hand['*'] > 0:
            print("your '*' hasn't been used yet\n  你的 '*' 还没用，把握机会！\n")
        print('create a word using the letters\n根据这些牌的字母，组成一个单词，输入进来--大小写均可')
        print("total_score: \总分数" , total_score)
        
        n = calculate_handlen(hand)
        # Display the hand
        display_hand(hand)
        
        # Ask user for input
        word = input(str("input your word输入你组成的单词\n"))
        word = word.lower()
        if word == 'wdnmd':
            print('====================================')
            print("seems that you are in trouble, do you need help?\n看起来你不太行，需要换个字母吗？")
            letter = word
            hand = substitute_hand(hand, letter)


        # If the input is two exclamation points:
        if word == '!!':
            # End the game (break out of the loop)
            print("Quit Game")
            break

            
        # Otherwise (the input is not two exclamation points):
        elif word != 'wdnmd' and word != '!!':
            # If the word is valid:
            if is_valid_word(word, hand, word_list):
                # Tell the user how many points the word earned,
                print("how many points the word earned: 这个单词多少分：", get_word_score(word, n))
                # and the updated total score

                total_score += get_word_score(word, n)
                # update the user's hand by removing the letters of their inputted word
                hand = update_hand(hand, word)
                print("---------------------------------------------------------\n")
            # Otherwise (the word is not valid):
            else:    
            # Reject invalid word (print a message)
                print("word invalid")
                print("------------------------------------------------------")
                
                
            

    # Game is over (user entered '!!' or ran out of letters),
    # so tell user the total score
    print("game over, your score:")
    print(total_score)
    # Return the total score as result of function



#
# Problem #6: Playing a game
# 


#
# procedure you will use to substitute a letter in a hand
#

def substitute_hand(hand, letter):
    """ 
    Allow the user to replace all copies of one letter in the hand (chosen by user)
    with a new letter chosen from the VOWELS and CONSONANTS at random. The new letter
    should be different from user's choice, and should not be any of the letters
    already in the hand.

    If user provide a letter not in the hand, the hand should be the same.

    Has no side effects: does not mutate hand.

    For example:
        substitute_hand({'h':1, 'e':1, 'l':2, 'o':1}, 'l')
    might return:
        {'h':1, 'e':1, 'o':1, 'x':2} -> if the new letter is 'x'
    The new letter should not be 'h', 'e', 'l', or 'o' since those letters were
    already in the hand.
    
    hand: dictionary (string -> int)
    letter: string
    returns: dictionary (string -> int)
    """
   
    print("helper mode\n您已经进入帮助模式,请按照指示操作")
    display_hand(hand)
    alphabet =  string.ascii_lowercase

    # alphabet letters should not contain letters in hand
    for l in hand:
        alphabet = alphabet.replace(l, '')
    # choose a word from alphabet
    replace_word = random.choice(alphabet)
    #let the user choose a word in hand to replace    
    new = input(str("choose a letter to replace\n你要换掉哪张牌？"))
    #check if the letter is in hand
    if new in hand:
        hand[replace_word] = hand.pop(new)
        print("already replace ", new, "with ", replace_word)
        print("替换完毕，请继续游戏")
        print('==========================================')        
        return hand
    else:
        print('the word you choose is not inside\n没有你这张牌，同志\n')
        print('=================================')
    
    
    
       
    
def play_game(word_list):
    """
    Allow the user to play a series of hands
    
    * Asks the user to input a total number of hands
    
    * Accumulates the score for each hand into a total score for the 
      entire series
 
    * For each hand, before playing, ask the user if they want to substitute
      one letter for another. If the user inputs 'yes', prompt them for their
      desired letter. This can only be done once during the game. Once the
      substitue option is used, the user should not be asked if they want to
      substitute letters in the future.

    * For each hand, ask the user if they would like to replay the hand.
      If the user inputs 'yes', they will replay the hand and keep 
      the better of the two scores for that hand.  This can only be done once 
      during the game. Once the replay option is used, the user should not
      be asked if they want to replay future hands. Replaying the hand does
      not count as one of the total number of hands the user initially
      wanted to play.

            * Note: if you replay a hand, you do not get the option to substitute
                    a letter - you must play whatever hand you just had.
      
    * Returns the total score for the series of hands

    word_list: list of lowercase strings
    """
    #input how many words in hand
    n = int(input(" Please input a total number of hands--选择你的手牌数量--给我输入个数字  建议7或者8\n"))
    
    hand_1 = deal_hand(n)
    hand_2 = deal_hand(n)
    hand_3 = deal_hand(n)
    check_digit = True
    #choose a hand
    
    print("No.1:" )
    display_hand(hand_1)
    print("No.2:" )
    display_hand(hand_2)
    print("No.3:" )
    display_hand(hand_3)
    m = int(input("choose a hand(1 or 2 or 3)--选一套牌--输入1或者2或者3\n"))
    if m == 1:
        hand = hand_1
    if m == 2:
        hand = hand_2
    if m == 3:
        hand = hand_3
    print("your choice: hand_", m )
    print("----------------------------------------------")
    
    # shart the game
    print("GAME START")
    play_hand(hand, word_list)

    


#
# Build data structures used for entire session and play game
# Do not remove the "if __name__ == '__main__':" line - this code is executed
# when the program is run directly, instead of through an import statement
#

word_list = load_words()
play_game(word_list)
